#!/usr/bin/env bash
###############################################################################
# Script Name : setup-dnsmasq-sno.sh
# Author      : Andr√© Casagrande (andre.casagrande@ibm.com)
# Version     : v1.0
# Date        : 2025-10-03
# Repository  : https://github.com/andre-casagrande/sno-labs (placeholder)
#
# Purpose     : Install & configure dnsmasq for a Single Node OpenShift (SNO) lab
#
# Description :
#   - Installs dnsmasq if not present (supports apt, dnf, yum, zypper)
#   - Prompts user for: cluster name, hostname, base domain, master IP, bastion IP
#   - Generates a config in /etc/dnsmasq.d/sno.conf
#   - Adds static DNS records for api, apps, and api-int endpoints
#   - Configures external upstream DNS (default: Cloudflare + Google)
#   - Enables & starts dnsmasq service
#   - Opens firewall port 53 if firewalld or ufw are present
#
# Usage:
#   chmod +x setup-dnsmasq-sno.sh
#   sudo ./setup-dnsmasq-sno.sh
#
# Example Inputs:
#   Cluster name : snotest
#   Hostname     : bastion
#   Base domain  : p1292.cecc.ihost.com
#   Master IP    : 129.40.94.218
#   Bastion IP   : 129.40.94.218
#
# Example Generated Records:
#   address=/api.snotest.p1292.cecc.ihost.com/129.40.94.218
#   address=/apps.snotest.p1292.cecc.ihost.com/129.40.94.218
#   address=/api-int.snotest.p1292.cecc.ihost.com/129.40.94.218
#
# Notes:
#   - Make sure clients use the Bastion IP as their DNS server
#   - Verify with: dig @<BastionIP> api.<cluster>.<domain>
###############################################################################

set -euo pipefail

# -------- helpers --------
log() { echo -e "\e[1;32m[INFO]\e[0m $*"; }
err() { echo -e "\e[1;31m[ERROR]\e[0m $*" >&2; }
require_root() {
  if [[ $EUID -ne 0 ]]; then
    err "This script must be run as root. Use sudo or run as root."
    exit 1
  fi
}

detect_pkg_mgr() {
  if command -v apt-get >/dev/null 2>&1; then
    echo "apt"
  elif command -v dnf >/dev/null 2>&1; then
    echo "dnf"
  elif command -v yum >/dev/null 2>&1; then
    echo "yum"
  elif command -v zypper >/dev/null 2>&1; then
    echo "zypper"
  else
    echo "unknown"
  fi
}

install_package() {
  local pkg_mgr=$1 pkg=$2
  case "$pkg_mgr" in
    apt)
      apt-get update -y
      DEBIAN_FRONTEND=noninteractive apt-get install -y "$pkg"
      ;;
    dnf)
      dnf install -y "$pkg"
      ;;
    yum)
      yum install -y "$pkg"
      ;;
    zypper)
      zypper --non-interactive install -y "$pkg"
      ;;
    *)
      err "No supported package manager found. Install dnsmasq manually."
      return 1
      ;;
  esac
}

# ------------- start --------------
require_root

log "This script will install and configure dnsmasq (if needed) and create a SNO DNS config."
log "All prompts will be in English."

# Prompts (English)
read -r -p "Cluster name (example: snotest): " CLUSTER_NAME
read -r -p "Host name (single host name to use, example: bastion): " HOST_NAME
read -r -p "Base domain (example: p1292.cecc.ihost.com): " BASE_DOMAIN
read -r -p "Master IP (the IP that api/apps/api-int should resolve to, example: 129.40.94.218): " MASTER_IP
read -r -p "Bastion IP (the IP where dnsmasq should listen, example: 129.40.94.218): " BASTION_IP
read -r -p "External DNS servers (comma separated, default: 1.1.1.1,8.8.8.8): " EXTERNAL_DNS

# Defaults
EXTERNAL_DNS=${EXTERNAL_DNS:-"1.1.1.1,8.8.8.8"}

# Derived names
API_FQDN="api.${CLUSTER_NAME}.${BASE_DOMAIN}"
APPS_FQDN="apps.${CLUSTER_NAME}.${BASE_DOMAIN}"
APIINT_FQDN="api-int.${CLUSTER_NAME}.${BASE_DOMAIN}"

# Files & backup
DNSMASQ_CONF_DIR="/etc/dnsmasq.d"
SNO_CONF="${DNSMASQ_CONF_DIR}/sno.conf"
BACKUP_DIR="/root/dnsmasq-backups-$(date +%Y%m%d%H%M%S)"

mkdir -p "${BACKUP_DIR}"

# Install dnsmasq if missing
if ! command -v dnsmasq >/dev/null 2>&1; then
  log "dnsmasq not found. Installing..."
  PKG_MGR=$(detect_pkg_mgr)
  case "$PKG_MGR" in
    apt|dnf|yum|zypper)
      install_package "$PKG_MGR" "dnsmasq"
      ;;
    *)
      err "Unsupported system (no apt/dnf/yum/zypper). Please install dnsmasq manually and re-run."
      exit 1
      ;;
  esac
else
  log "dnsmasq already installed."
fi

# Backup existing sno.conf if exists
if [[ -f "${SNO_CONF}" ]]; then
  log "Backing up existing ${SNO_CONF} to ${BACKUP_DIR}/"
  cp -a "${SNO_CONF}" "${BACKUP_DIR}/"
fi

# If any dnsmasq configs exist, back them up (safe)
if ls ${DNSMASQ_CONF_DIR}/*.conf >/dev/null 2>&1; then
  log "Backing up other dnsmasq .conf files to ${BACKUP_DIR}/"
  cp -a "${DNSMASQ_CONF_DIR}"/*.conf "${BACKUP_DIR}/" || true
fi

# Create the sno dnsmasq config
log "Writing ${SNO_CONF} ..."
cat > "${SNO_CONF}" <<EOF
# dnsmasq configuration for SNO lab - generated by setup-dnsmasq-sno.sh
listen-address=${BASTION_IP}
bind-interfaces
domain-needed
bogus-priv
no-resolv
EOF

# Split EXTERNAL_DNS and write server= lines
IFS=',' read -ra DNS_SERVERS <<< "$EXTERNAL_DNS"
for s in "${DNS_SERVERS[@]}"; do
  s_trimmed="$(echo "$s" | tr -d '[:space:]')"
  if [[ -n "$s_trimmed" ]]; then
    echo "server=${s_trimmed}" >> "${SNO_CONF}"
  fi
done

# Add the SNO-specific address records (map all three names to MASTER_IP)
cat >> "${SNO_CONF}" <<EOF

# SNO records
address=/${API_FQDN}/${MASTER_IP}
address=/${APPS_FQDN}/${MASTER_IP}
address=/${APIINT_FQDN}/${MASTER_IP}

log-facility=/var/log/dnsmasq-sno.log
cache-size=1000
EOF

log "Config file created. Showing ${SNO_CONF}:"
echo "--------------------------------------------------"
sed -n '1,200p' "${SNO_CONF}"
echo "--------------------------------------------------"

# Restart service
if command -v systemctl >/dev/null 2>&1; then
  log "Restarting dnsmasq service..."
  systemctl daemon-reload || true
  systemctl enable --now dnsmasq
  systemctl restart dnsmasq
else
  service dnsmasq restart || true
fi

log "Setup finished."
echo "Verify with: dig @${BASTION_IP} ${API_FQDN} +short"
